{
  "hash": "b09c1006d0f01a8bc2589f310282057f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sarah Zeller\ntitle: \"Creating a locator map with `ggplot2`\"\ndate: \"2025-02-02\"\ncategories: [code, visualization]\nimage: \"locator-map.png\"\ncitation: \n  url: https://sarahzeller.github.io/blog/posts/locator-map/\n\nformat:\n  html:\n    toc: true\n\nexecute:\n  warning: false\n---\n\n\n\nSometimes I visualize data on a country that not everyone is familiar with. In this case, a locator map can be helpful: It shows where in the world my country of interest is. Here, I'll show you how to create such a locator map for Ghana.\n\n![](locator-map.png)\n\n# Preparation\n\nFirst, I load all necessary libraries.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(countrycode)\nlibrary(rnaturalearth)\nlibrary(mapview)\n```\n:::\n\n\n\nThen, I set the coordinate reference system (CRS) for my map. This is a bit obscure, not a standard ESRI/EPSG code. Instead, we want to show just the part of the world where our country lies.\n\nIf your country is not in Africa, you might have to adjust the `lon` parameter.\n\n::: callout-tip\n`ggplot2` does not handle all CRS well. You might have to try around a bit before you find one that shows the area you want to show and where the graticules also show properly.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocator_crs <- \"+proj=ortho +lat_0=5 +lon_0=+40\"\n```\n:::\n\n\n\nI then load the map data: data for the whole world. It's saved in a format called `sf`, which stands for spatial feature. We can treat it just like any other data frame, but each row has a column called \"geometry\", from which the coordinates of the row can be plotted -- in this case, a country's outline.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\nworld <- ne_countries(scale = \"small\",\n                      returnclass = \"sf\") |> \n  st_cast('MULTILINESTRING') |> \n  st_cast('LINESTRING', do_split = TRUE) |> \n  mutate(npts = npts(geometry, by_feature = TRUE)) |> \n  st_cast('POLYGON')\n```\n:::\n\n\n\n# Plotting\n\nNow, we're ready to plot our map!\n\n## Plotting the graticule\n\nLet's start out with just plotting our graticule. That's the net of lines that make up the latitudes and longitudes, and that we're used to seeing from a gobe. For that, we'll need:\n\n-   a graticule\n-   the projection\n-   a `theme_void()`\n\n::: callout-tip\nTechnically, you can also simply use the `ggplot` gridlines. However, they're a bit buggy, so I'd recommend using these explicit gridlines. That's why we're also using the `theme_void()`: so we don't get those gridlines as well.\n:::\n\nWe can use the function `sf::st_graticule` to create this graticule on the fly.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobe <- ggplot() +\n  # define our graticules\n  geom_sf(data = st_graticule(n_discr = 1),\n          col = \"grey80\", fill = \"white\", linewidth = .25) +\n  # define the CRS and theme\n  coord_sf(crs = locator_crs) +\n  theme_void() \n\nglobe\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-graticule-1.png){width=672}\n:::\n:::\n\n\n\nAnd ta-da, that's our globe!\n\n## Plotting the world\n\nLet's continue with plotting the world on top, so we have some context for locating. We'll plot the world in a grey tone, since we only need it for context, but don't want the map reader to be overwhelmed.\n\nWe'll need:\n\n-   a world `sf` dataset\n-   our CRS (again)\n\nSince we're using the Natural Earth dataset, we'll give credit to them through the caption.\n\n::: callout-tip\nWe need to define the CRS again because we're calling a geometry (`geom_sf()`) after we last defined the CRS.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocator_map <- globe +\n  geom_sf(data = world,\n          col = \"grey85\") +\n  # define the CRS\n  coord_sf(crs = locator_crs) +\n  # give credit\n  labs(caption = \"Data: Natural Earth\")\n\nlocator_map\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/locator-map-outline-1.png){width=672}\n:::\n:::\n\n\n\n## Highlighting our country\n\nNow let's get to the interesting part: highlighting!\n\n### Highlighting by color\n\nWith countries that are large enough, simply highlighting by color works well. We give the country any other color than grey, and it's going to pop.\n\nSo what do we need?\n\n-   our country's geometry\n-   a highlighting color (I'm choosing white)\n-   our CRS (again)\n\nWe're starting with our last map, and add just our country on top.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocator_map +\n  # define our country\n  geom_sf(data = world |> filter(sovereignt == \"Ghana\"),\n          fill = \"#1EB53A\",\n          col = \"grey85\") +\n  # make sure we have the correct CRS\n  coord_sf(crs = locator_crs) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/locator-map-color-1.png){width=672}\n:::\n:::\n\n\n\n### Highlighting with a dot\n\nSometimes, we don't want to highlight a whole country, but instead just a smaller spot -- maybe\n\n-   a city,\n-   a mountain or\n-   a tree that we find interesting.\n\nIn this case, it makes sense to use a point geometry for highlighting. So we'll need\n\n-   a point geometry\n-   our CRS (again)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make Ghana a point geometry\nghana_dot <- world |> \n  filter(sovereignt == \"Ghana\") |> \n  st_centroid()\n\nlocator_map +\n  geom_sf(data = ghana_dot) +\n  # make sure we have the correct CRS\n  coord_sf(crs = locator_crs) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/locator-map-point-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\nHere, we don't have to define a color -- having one point already pops.\n:::\n\n### Highlighting with a bounding box\n\nSometimes, we want to highlight a larger area that wouldn't show well on a globe: maybe an island group or a small country. In this case, we can also highlight using a bounding box of our original geometry.\n\nSo let's start by creating our bounding box for the geometry. Importantly, it needs to be a polygon so we can plot it.\n\n::: callout-tip\nMake sure you transform your polygon's CRS to the one you'll be using for the locator map. Otherwise, the bounding box won't be rectangular.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghana_bbox <- world |> \n  filter(sovereignt == \"Ghana\") |> \n  st_transform(locator_crs) |> \n  st_bbox() |> \n  st_as_sfc()\n\nggplot() +\n  geom_sf(data = ghana_bbox) +\n  coord_sf(crs = locator_crs)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/create-bbox-1.png){width=672}\n:::\n:::\n\n\n\nIf we plot it, we can see it's just a rectangle. And it's got 90Â° angles when using our locator map CRS. Perfect, so let's plot it on top of our raw locator map! Let's make sure that we buffer the bounding box a bit -- that way, we can see the borders of our country. Setting `fill` to `NA` makes sure that we can see what's below the bounding box.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocator_map +\n  geom_sf(data = ghana_bbox |> st_buffer(5e4),\n          fill = NA,\n          lwd = .5) +\n  # make sure we have the correct CRS\n  coord_sf(crs = locator_crs) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/locator-map-bbox-1.png){width=672}\n:::\n:::\n\n\n\nAnd there we go: three different ways of creating a locator map. If you want to combine it with your more detailed map into a single plot, I'd recommend the package `patchwork` for this.\n\n# Just the code, please\n\nIf you just want to grab the code, here you go.\n\n::: panel-tabset\n#### Color highlight\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  # define our graticules\n  geom_sf(data = st_graticule(n_discr = 1),\n          col = \"grey80\", fill = \"white\", linewidth = .25) +\n  # world\n  geom_sf(data = world,\n          col = \"grey85\") +\n  # our country\n  geom_sf(data = world |> filter(sovereignt == \"Ghana\"),\n          fill = \"#1EB53A\",\n          col = \"grey85\") +\n  # give credit\n  labs(caption = \"Data: Natural Earth\") +\n  # define the CRS and theme\n  coord_sf(crs = locator_crs) +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/full-code-color-1.png){width=672}\n:::\n:::\n\n\n\n#### Point highlight\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghana_dot <- world |> \n  filter(sovereignt == \"Ghana\") |> \n  st_centroid()\n\nggplot() +\n  # define our graticules\n  geom_sf(data = st_graticule(n_discr = 1),\n          col = \"grey80\", fill = \"white\", linewidth = .25) +\n  # world\n  geom_sf(data = world,\n          col = \"grey85\") +\n  # our country\n  geom_sf(data = ghana_dot) +\n  # give credit\n  labs(caption = \"Data: Natural Earth\") +\n  # define the CRS and theme\n  coord_sf(crs = locator_crs) +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/full-code-point-1.png){width=672}\n:::\n:::\n\n\n\n#### Bounding box highlight\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nghana_bbox <- world |> \n  filter(sovereignt == \"Ghana\") |> \n  st_transform(locator_crs) |> \n  st_bbox() |> \n  st_as_sfc()\n\nggplot() +\n  # define our graticules\n  geom_sf(data = st_graticule(n_discr = 1),\n          col = \"grey80\", fill = \"white\", linewidth = .25) +\n  # world\n  geom_sf(data = world,\n          col = \"grey85\") +\n  # our country\n  geom_sf(data = ghana_bbox, \n          fill = NA,\n          lwd = .5) +\n  # give credit\n  labs(caption = \"Data: Natural Earth\") +\n  # define the CRS and theme\n  coord_sf(crs = locator_crs) +\n  theme_void() \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/full-code-bbox-1.png){width=672}\n:::\n:::\n\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}