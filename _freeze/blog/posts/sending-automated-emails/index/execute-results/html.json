{
  "hash": "cde19f719d6330783a8d21ca436dfee8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sarah Zeller\ntitle: \"Sending automated emails\"\ndate: \"2025-02-12\"\ncategories: [code, visualization]\nimage: \"mail.webp\"\ncitation: \n  url: https://sarahzeller.github.io/blog/posts/sending-automated-emails/\n\nformat:\n  html:\n    toc: true\n\nexecute:\n  warning: false\n  eval: false\n---\n\n\n\nI recently needed to send out an email to many recipients, with only slight changes in the text.\nAnd I figured -- this must be something we can do with `R`, right?\n\nLuckily enough, there's the `RDCOMClient` library which lets `R` access some programs, including Outlook.\nSo if you have Outlook set up on your computer, this approach will work like a charm.\nActually, it was kind of scary for me: this really works, and real emails get sent. ðŸ˜±\n\n::: callout-note\nThis approach only works on Windows computers.\n:::\n\n\n## Preparation\n\nWhat do we need?\n\n-   the `RDCOMClient` library\n-   a `data.frame` including the email addresses and the bit we want changed\n-   a template text\n\nSo let's start by loading the needed libraries.\nWe already talked about `RDCOMClient`. `dplyr` and `glue` make pasting our template and our information together easier, and `purrr` will allow us to loop over our info `data.frame`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(glue)\nlibrary(dplyr)\nlibrary(RDCOMClient)\nlibrary(purrr)\n```\n:::\n\n\n\nLet's start with our template! \nWe'll make it nice and short.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemplate <- \"Good morning!\nDo you enjoy {food}?\nHave a great day.\"\n```\n:::\n\n\n\n\nNext, we'd load our `data.frame`; for this showcase purpose, we'll just make it up from scratch.\nWe'll combine our template and our bit of information into a new column, `text`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfo <- tibble::tribble(\n  ~email, ~info,\n  \"anna@example.com\", \"apples\",\n  \"bernardo@example.com\", \"bananas\",\n  \"charlie@example.com\", \"chocolate\",\n  \"donald@example.com\", \"donuts\"\n) |> \n  dplyr::mutate(text = glue::glue(template, food = info))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninfo |> kableExtra::kbl()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> email </th>\n   <th style=\"text-align:left;\"> info </th>\n   <th style=\"text-align:left;\"> text </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> anna@example.com </td>\n   <td style=\"text-align:left;\"> apples </td>\n   <td style=\"text-align:left;\"> Good morning!\nDo you enjoy apples?\nHave a great day. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> bernardo@example.com </td>\n   <td style=\"text-align:left;\"> bananas </td>\n   <td style=\"text-align:left;\"> Good morning!\nDo you enjoy bananas?\nHave a great day. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> charlie@example.com </td>\n   <td style=\"text-align:left;\"> chocolate </td>\n   <td style=\"text-align:left;\"> Good morning!\nDo you enjoy chocolate?\nHave a great day. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> donald@example.com </td>\n   <td style=\"text-align:left;\"> donuts </td>\n   <td style=\"text-align:left;\"> Good morning!\nDo you enjoy donuts?\nHave a great day. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n## Mail function\n\nNext, let's set up the function which we will map over to send our mails!\nLet's start by understanding what `RDCOMClient` does for us.\n\n### Open Outlook\n\nThe first thing we want to do -- and just once -- is to open the Outlook app.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOutlook <- COMCreate(\"Outlook.Application\")\n```\n:::\n\n\n\n\n### Create an email\n\nWe need to start off by creating an email -- just like when you're in Outlook, you click on `Create`.\nWe're telling `RDCOMClient` that it's Outlook we want to use by putting it first, and we put the command we want executed after the `$` sign.\n\nLet's also save this email to an object, so that we can work on it again after.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEmail <- Outlook$CreateItem(0)\n```\n:::\n\n\n\n### Set recipient, subject and body\n\nWhat's the next thing you'd do when writing an email?\nYou'd type in who you want to send the email to and what it's about -- recipient and subject.\nThen, you'd enter the text -- the body.\n\nWe can do that using attributes of the `Email` object we've created.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_info <- info |> head(1)\n\nEmail[[\"to\"]] <- first_info$email\nEmail[[\"subject\"]] <- \"Hello!\"\nEmail[[\"body\"]] <- first_info$text\n```\n:::\n\n\n\n### Sending the email\n\nLastly, we need to click on `Send`.\nThis is, again, an `Outlook$` function, not an attribute.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEmail$Send()\n```\n:::\n\n\n\n\n### Piecing together the pieces\n\nThis is our final function, where we have incorporated everything we need.\nNote that we don't include opening Outlook -- this is something we only need to do once.\nWe can now take this function and map over it.\n\n::: callout-tip\nNote that in our approach, we're using the same subject for all emails.\nYou could, however, also map over this part.\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsend_mail <- function(to = \"\",\n                      body = \"\",\n                      subject = \"Hello from R\"){\n  Email = Outlook$CreateItem(0)\n  Email[[\"to\"]] = to\n  Email[[\"subject\"]] = subject\n  Email[[\"body\"]] = body\n  Email$Send()\n}\n```\n:::\n\n\n\n## Mapping over the function\n\nLet's now take `purr` to map over this!\nWe'll need the `walk2` function, since we have two inputs for every mail that change: \n\n-   email\n-   body/text\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOutlook <- COMCreate(\"Outlook.Application\")\nwalk2(.x = info$email,\n      .y = info$text,\n      .f = ~ send_mail(to = .x, body = .y))\n```\n:::\n\n\n\nAnd there we have it -- we can send out an email to Anna, Bernardo, Charlie and Donald all at once!\nYou can check in your Outlook outbox that these emails actually sent.\n\n## Approaches without Outlook\n\nUsing `RDCOMClient` to access Outlook is a bit hacky, but was exactly the right thing for me. \nHowever, we could use a more direct approach, without using the Outlook user interface.\n\n[This](https://mailtrap.io/blog/r-send-email/) blogpost by mailtrap goes into detail about how you can achieve this.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}